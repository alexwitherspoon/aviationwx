name: Test and Lint

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]
    paths-ignore:
      - "**.md"
      - "**.MD"

# Default permissions for all jobs in this workflow
permissions:
  contents: read
  actions: read

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: apcu, gd, zip, curl
          coverage: none
      
      - name: Validate PHP syntax
        run: |
          echo "Checking PHP syntax..."
          errors=$(find . -name "*.php" -not -path "./vendor/*" -exec php -l {} \; 2>&1 | grep -v "No syntax errors" || true)
          if [ ! -z "$errors" ]; then
            echo "❌ PHP syntax errors found:"
            echo "$errors"
            exit 1
          else
            echo "✓ All PHP files have valid syntax"
          fi
      
      - name: Run PHPUnit - Unit Tests (Critical)
        run: |
          echo "Running unit tests..."
          # Run tests and capture exit code
          vendor/bin/phpunit --testsuite Unit --testdox --log-junit unit-results.xml
          exit_code=$?
          # Exit code 0 = success, 1 = warnings, 2+ = failures
          if [ $exit_code -gt 1 ]; then
            echo "❌ Unit tests failed - check output above"
            exit 1
          elif [ $exit_code -eq 1 ]; then
            echo "⚠️  Unit tests passed with warnings (expected in CI without coverage driver)"
          else
            echo "✓ Unit tests passed"
          fi
      
      - name: Run PHPUnit - Integration Tests
        run: |
          echo "Running integration tests..."
          # Run tests and capture exit code
          vendor/bin/phpunit --testsuite Integration --testdox --log-junit integration-results.xml
          exit_code=$?
          # Exit code 0 = success, 1 = warnings, 2+ = failures
          if [ $exit_code -gt 1 ]; then
            echo "❌ Integration tests failed - check output above"
            exit 1
          elif [ $exit_code -eq 1 ]; then
            echo "⚠️  Integration tests passed with warnings (expected in CI without coverage driver)"
          else
            echo "✓ Integration tests passed"
          fi
      
      - name: Run Critical Safety Tests
        run: |
          echo "Running critical safety tests..."
          # These are critical - must pass (no || [ $? -eq 1 ])
          vendor/bin/phpunit tests/Unit/StaleDataSafetyTest.php --testdox --stop-on-failure
          vendor/bin/phpunit tests/Unit/WeatherCalculationsTest.php --testdox --stop-on-failure
          vendor/bin/phpunit tests/Unit/ErrorHandlingTest.php --testdox --stop-on-failure
      
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: critical-test-results
          path: |
            unit-results.xml
            integration-results.xml
          retention-days: 7
      
      - name: Check for required files
        run: |
          required_files=("index.php" "weather.php" "webcam.php" "config-utils.php" "rate-limit.php")
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Required file missing: $file"
              exit 1
            fi
          done
          echo "✓ All required files present"
      
      - name: Validate JSON files
        run: |
          if [ -f "airports.json.example" ]; then
            php -r "json_decode(file_get_contents('airports.json.example'), true); if (json_last_error() !== JSON_ERROR_NONE) { echo 'Invalid JSON: ' . json_last_error_msg() . PHP_EOL; exit(1); }"
            echo "✓ airports.json.example is valid JSON"
          fi
      
      - name: Test config utilities
        run: |
          php -r "
          require_once 'config-utils.php';
          
          // Test validation
          \$tests = [
            ['kspb', true],
            ['KSPB', true], // Should be lowercased
            ['kx12', true],
            ['invalid!!', false],
            ['', false],
            ['toolong123', false],
            ['ab', false], // Too short
          ];
          
          foreach (\$tests as [\$id, \$expected]) {
            \$result = validateAirportId(\$id);
            if (\$result !== \$expected) {
              echo 'FAIL: validateAirportId(\"' . \$id . '\") returned ' . (\$result ? 'true' : 'false') . ', expected ' . (\$expected ? 'true' : 'false') . PHP_EOL;
              exit(1);
            }
          }
          
          echo '✓ Airport ID validation tests passed' . PHP_EOL;
          "
      
      - name: Check for security issues
        run: |
          # Check for dangerous functions in PHP files
          dangerous_patterns=(
            "eval("
            "base64_decode.*\$_GET"
            "base64_decode.*\$_POST"
            "file_get_contents.*\$_GET"
            "file_get_contents.*\$_POST"
          )
          
          for pattern in "${dangerous_patterns[@]}"; do
            matches=$(grep -r "$pattern" --include="*.php" . | grep -v "test" | grep -v "diagnostics" || true)
            if [ ! -z "$matches" ]; then
              echo "⚠️  Potentially dangerous pattern found: $pattern"
              echo "$matches"
              # Don't fail, just warn
            fi
          done
          
          echo "✓ Security check complete"
      
      - name: Test rate limiting functions
        run: |
          php -r "
          require_once 'rate-limit.php';
          
          // Basic function existence test
          if (!function_exists('checkRateLimit')) {
            echo 'FAIL: checkRateLimit function not found' . PHP_EOL;
            exit(1);
          }
          
          if (!function_exists('getRateLimitRemaining')) {
            echo 'FAIL: getRateLimitRemaining function not found' . PHP_EOL;
            exit(1);
          }
          
          echo '✓ Rate limiting functions exist' . PHP_EOL;
          "
      
      - name: Check Dockerfile
        run: |
          if [ ! -f "Dockerfile" ]; then
            echo "❌ Dockerfile missing"
            exit 1
          fi
          
          # Check for required components
          grep -q "FROM php:8.3-apache" Dockerfile || (echo "❌ Dockerfile doesn't use PHP 8.3-apache" && exit 1)
          grep -q "ffmpeg" Dockerfile || (echo "⚠️  ffmpeg not found in Dockerfile" || true)
          
          echo "✓ Dockerfile checks passed"
      
      - name: Check docker-compose files
        run: |
          if [ ! -f "docker-compose.yml" ] || [ ! -f "docker-compose.prod.yml" ]; then
            echo "❌ Docker Compose files missing"
            exit 1
          fi
          echo "✓ Docker Compose files present"