name: Test and Lint

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]
    paths-ignore:
      - "**.md"
      - "**.MD"
      - "README.md"
      - "CONTRIBUTING.md"
      - "ARCHITECTURE.md"
      - "API.md"
      - "CONFIGURATION.md"
      - "LICENSE"

jobs:
  test:
    name: PHPUnit Tests (Critical)
    runs-on: ubuntu-latest
    fail-fast: true  # Stop all jobs if one fails
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: apcu, gd, zip, curl, json, mbstring
          coverage: none
      
      - name: Install Composer dependencies
        run: |
          composer install --no-interaction --prefer-dist --optimize-autoloader --no-progress
      
      - name: Validate PHP syntax
        run: |
          echo "Checking PHP syntax..."
          errors=$(find . -name "*.php" -not -path "./vendor/*" -exec php -l {} \; 2>&1 | grep -v "No syntax errors" || true)
          if [ ! -z "$errors" ]; then
            echo "‚ùå PHP syntax errors found:"
            echo "$errors"
            exit 1
          else
            echo "‚úì All PHP files have valid syntax"
          fi
      
      - name: Run PHPUnit - Unit Tests (Critical)
        run: |
          echo "Running unit tests..."
          vendor/bin/phpunit --testsuite Unit --testdox --log-junit unit-results.xml
      
      - name: Run PHPUnit - Integration Tests
        run: |
          echo "Running integration tests..."
          vendor/bin/phpunit --testsuite Integration --testdox --log-junit integration-results.xml
      
      - name: Run Critical Safety Tests
        run: |
          echo "Running critical safety tests..."
          vendor/bin/phpunit tests/Unit/StaleDataSafetyTest.php --testdox
          vendor/bin/phpunit tests/Unit/WeatherCalculationsTest.php --testdox
          vendor/bin/phpunit tests/Unit/ErrorHandlingTest.php --testdox
      
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: critical-test-results
          path: |
            unit-results.xml
            integration-results.xml
          retention-days: 7
      
      - name: Check for required files
        run: |
          required_files=("index.php" "weather.php" "webcam.php" "config-utils.php" "rate-limit.php" "logger.php")
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Required file missing: $file"
              exit 1
            fi
          done
          echo "‚úì All required files present"
      
      - name: Validate JSON files
        run: |
          if [ -f "airports.json.example" ]; then
            php -r "json_decode(file_get_contents('airports.json.example'), true); if (json_last_error() !== JSON_ERROR_NONE) { echo 'Invalid JSON: ' . json_last_error_msg() . PHP_EOL; exit(1); }"
            echo "‚úì airports.json.example is valid JSON"
          fi
      
      - name: Check for security issues
        run: |
          # Check for dangerous functions in PHP files
          dangerous_patterns=(
            "eval("
            "base64_decode.*\$_GET"
            "base64_decode.*\$_POST"
            "file_get_contents.*\$_GET"
            "file_get_contents.*\$_POST"
          )
          
          found_issues=false
          for pattern in "${dangerous_patterns[@]}"; do
            matches=$(grep -r "$pattern" --include="*.php" . | grep -v "test" | grep -v "diagnostics" || true)
            if [ ! -z "$matches" ]; then
              echo "‚ö†Ô∏è  Potentially dangerous pattern found: $pattern"
              echo "$matches"
              found_issues=true
            fi
          done
          
          if [ "$found_issues" = true ]; then
            echo "‚ùå Security issues found - please review"
            exit 1
          fi
          
          echo "‚úì Security check complete"
      
      - name: Check Dockerfile
        run: |
          if [ ! -f "Dockerfile" ]; then
            echo "‚ùå Dockerfile missing"
            exit 1
          fi
          
          # Check for required components
          grep -q "FROM php:8.3-apache" Dockerfile || (echo "‚ùå Dockerfile doesn't use PHP 8.3-apache" && exit 1)
          
          echo "‚úì Dockerfile checks passed"
      
      - name: Check docker-compose files
        run: |
          if [ ! -f "docker-compose.yml" ] || [ ! -f "docker-compose.prod.yml" ]; then
            echo "‚ùå Docker Compose files missing"
            exit 1
          fi
          echo "‚úì Docker Compose files present"
  
  critical-safety-tests:
    name: Critical Safety Tests (Must Pass)
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: apcu, gd, zip, curl, json, mbstring
          coverage: none
      
      - name: Install Composer dependencies
        run: |
          composer install --no-interaction --prefer-dist --optimize-autoloader --no-progress
      
      - name: Critical Test - Stale Data Safety
        run: |
          echo "üîí CRITICAL: Testing stale data safety checks..."
          vendor/bin/phpunit tests/Unit/StaleDataSafetyTest.php --testdox --stop-on-failure
      
      - name: Critical Test - Flight Category Calculations
        run: |
          echo "üîí CRITICAL: Testing flight category calculations..."
          vendor/bin/phpunit tests/Unit/WeatherCalculationsTest.php::testCalculateFlightCategory --testdox --stop-on-failure
      
      - name: Critical Test - Input Validation
        run: |
          echo "üîí CRITICAL: Testing input validation..."
          vendor/bin/phpunit tests/Unit/ConfigValidationTest.php --testdox --stop-on-failure
      
      - name: Critical Test - Error Handling
        run: |
          echo "üîí CRITICAL: Testing error handling..."
          vendor/bin/phpunit tests/Unit/ErrorHandlingTest.php --testdox --stop-on-failure
